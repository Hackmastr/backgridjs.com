{{#extend "layout"}}
  {{#replace "title"}}Grid{{/replace}}
  {{#replace "content"}}
    <div class="row">
      <div class="col-md-2">
        <h2>Grid</h2>
        <ul class="nav nav-stacked">
          <li><a href="http://wyuenho.github.io/backgrid/api/index.html#!/api/Backgrid.Grid">Backgrid.Grid</a></li>
        </ul>
        <h3>Events</h3>
        <ul class="nav nav-stacked">
          <li><a href="http://wyuenho.github.io/backgrid/api/index.html#!/api/Backgrid.Grid-method-render">backgrid:rendered</a></li>
        </ul>
      </div>
      <div class="col-md-10">
        <h3>How to Use the Grid</h3>
        <p>As described in the <a href="/#basic-example">examples</a>, a basic
          grid needs only a collection and a list of column definitions.</p>
        <p>To display the grid, you will need to render the grid and insert the
          grid's root element to the DOM in order to display it.</p>
        <textarea class="code-snippet" data-mode="javascript">
          var idGrid = new Backgrid.Grid({
            columns: [{
              name: "id",
              label: "ID"
              editable: false
            }],
            collection: myIds
          });

          $(".backgrid-container").append(idGrid.render().el);</textarea>
        <h3>Manipulating Columns and Rows</h3>
        <p>It is very easy to insert or remove a row in a grid, you just
          have to pass a model reference
          to <a href="http://wyuenho.github.io/backgrid/api/index.html#!/api/Backgrid.Grid-method-insertRow">Grid#insertRow</a>
          or <a href="http://wyuenho.github.io/backgrid/api/index.html#!/api/Backgrid.Grid-method-removeRow">Grid#removeRow</a>.</p>
        <textarea class="code-snippet" data-mode="javascript">
          // Inserting rows
          grid.insertRow([{
            // model 1
          }, {
            // model 2 ... etc
          }]);

          // Remove rows
          var musketeers = grid.collection.where({ job: "Musketeer" });
          grid.removeRow(musketeers);</textarea>
        <p>Inserting and remove columns is similarly easy. You just need
          to pass some definitions
          to <a href="http://wyuenho.github.io/backgrid/api/index.html#!/api/Backgrid.Grid-method-insertColumn">Grid#insertColumn</a>
          or
          <a href="http://wyuenho.github.io/backgrid/api/index.html#!/api/Backgrid.Grid-method-removeColumn">Grid#removeColumn</a>.</p>
        <textarea class="code-snippet" data-mode="javascript">
          // Insert a few new columns. Make sure your model has these attributes though.
          grid.insertColumn([{
            name: "lastUpdated",
            label: "Last Updated",
            cell: "datetime",
            editable: false
          }, {
            name: "lastModifiedBy",
            label: "Last Modified By",
            cell: "string"
          }]);

          // Remove a column
          var idCol = grid.columns.where({ name: "id" });
          grid.removeColumn(idCol);

          // Since 0.3.0, you can listen to the `backgrid:next` to see if a cell
          // movement was out of bound, if yes, you can insert a new row.

          // A movement is only out of bound when the user was trying to go beyond
          // the last row.
          grid.collection.listenTo("backgrid:next", function (i, j, outOfBound) {
            // this will add a row using the collection's model too
            if (outOfBound) grid.collection.add({});
          });</textarea>
        <h3>Sorting Programmatically</h3>
        <p>Sometimes, you might want to set the grid to a sorted state before
          display it, you can do that by calling <code>Grid#sort()</code> with a
          column name and a direction:</p>
        <textarea class="code-snippet" data-mode="javascript">
          // You must render first to have the grid construct all the DOM elements
          // before you can set the sorting state
          grid.render().sort("lastUpdated", "descending");

          // now you can display it
          $("#grid-container").append(grid.el);</textarea>
        <h3>Empty Message</h3>
        <p>If you want to display a message when the grid is empty. You can pass
          an<code>emptyMessage</code> string to the <code>options</code> object
          to the Grid's constructor.</p>
        <textarea class="code-snippet" data-mode="javascript">
          var grid = new Backgrid.Grid({
            columns: myColumns,
            collection: myCollection,
            emptyText: "No Data"
          });</textarea>
      </div>
    </div>
  {{/replace}}
{{/extend}}
